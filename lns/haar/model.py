"""Haar model representation.

This module contains the prediction model that will be generated by the Haar
training.
"""
from typing import List, Tuple

import cv2          # type: ignore
import numpy as np  # type: ignore

from lns.common.model import Model
from lns.common.structs import Object2D, Bounds2D


class HaarModel(Model):  # noqa: R903
    """Bounding-box prediction model utilizing Haar cascades."""

    scale_factor: float
    min_neighbours: int

    __cascade: cv2.CascadeClassifier
    __class_index: int

    def __init__(self, cascade_file: str, class_index: int) -> None:
        """Initialize a Haar cascade model.

        Contains a <cascade> and a <class_index> which represents the
        index of the class the cascade was trained to detect.
        """
        # Set default scale factor and min neighbours
        self.scale_factor = 1.1
        self.min_neighbours = 3

        self.__cascade = cv2.CascadeClassifier(cascade_file)
        self.__class_index = class_index

    def predict(self, image: np.ndarray) -> List[Object2D]:
        """Predict the required bounding boxes on the given <image>."""
        grayscale: np.ndarray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
        predictions: List[Tuple[int, int, int, int]] = self.__cascade.detectMultiScale(
            grayscale, self.scale_factor, self.min_neighbours)

        return [Object2D(Bounds2D(*prediction), self.__class_index) for prediction in predictions]
